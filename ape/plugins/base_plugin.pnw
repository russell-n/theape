The Base Plugin
===============
.. currentmodule:: ape.plugins.base_plugin
<<name='imports', echo=False>>=
# python standard library
from abc import ABCMeta, abstractmethod, abstractproperty
import os
from types import StringType

# third party
from configobj import ConfigObj, flatten_errors, get_extra_values
from validate import Validator

# this package 
from ape.infrastructure.baseclass import BaseClass
from ape.parts.helppage.helppage import HelpPage
from ape.infrastructure.code_graphs import module_diagram, class_diagram
from ape.infrastructure.errors import ConfigurationError
@
<<name='check_pweave', echo=False>>=
in_pweave = __name__ == '__builtin__'
@

.. _base-plugin:

Background
----------

This module contains a `BasePlugin` class that forms the foundation of the `ape` plugin-system. Creating a `BasePlugin` makes it easier to add code as it provides a concrete target for the person adding the code, removes the need for the infrastructure code to be changed when plugins are added, and encourages documentation by providing a built-in online help-interface and auto-included `rst` files.

In order to create a child of the `BasePlugin` you are required to implement two properties and one method: ``sections``, ``product``, and ``fetch_config()``. The ``sections`` and ``fetch_config`` are for the user-interface while the ``product`` should be the object to run. The ``sections`` can be ``None`` if you do not want the online help, but should otherwise be a dictionary with section-names as keys and content-strings as values. It will be passed to the :ref:`HelpPage <help-page>` so you should see that if you want to know what will be done with the ``sections`` property. If the ordering is important use a ``collections.OrderedDict``. The
``fetch_config`` is expected to be a method that sends a sample config-file snippet to stdout. I chose stdout rather than to disk because it allows the user to append it to existing files using redirection ``>>`` and it also serves as a prompt for those who just need to remember what the configuration should look like (I also had problems with users accidentally clobbering their configurations by pulling sample files). The ``product`` should be the built-object for the code to run (only the ``__call__`` method will be used so that has to be implemented on the ``product``). When the child-plugin is implemented, it will be passed a `ConfigObj`.

The :ref:`QuarterMaster <quarter-master>` looks for child-classes of the `BasePlugin` when deciding what is a valid plugin, so besides defining an implementation expectation for the new plugin, the `BasePlugin` also provides the means for inclusion in the `ape` (even if you drop a module in this folder, if nothing in it is a child of the `BasePlugin` it will be ignored). To check if it contains a `BasePlugin` the module has to be imported so be careful with globals and imports.

The `BasePlugin` class and the ``plugins`` package also provides the foundation for user help. As noted above, the ``sections`` and ``fetch_config`` are meant for online help and in addition to this the ``index.pnw`` file contains code to include any ``rst`` files in the ``plugins`` directory so adding documentation files here will add the text to the documentation when it is regenerated::

   Pweave index.pnw

To summarize, the `BasePlugin` is the main way to add code that will be exposed to the end user.

.. warning:: I have had a lot of problems troubleshooting when I accidentally name plugin-class the same thing as (one of) the class(es) it's building -- the re-definition of the name will wipe out your imported name. Don't do it. (e.g. don't create a plugin named Sample that builds a class named Sample as its product.)

.. '

Class Diagram
-------------

This is an (idealized) class diagram (see below for an auto-generated one).
    
.. uml::

   BaseClass <|-- BasePlugin
   BaseClass : logger
   BasePlugin : configuration
   BasePlugin o- HelpPage
   BasePlugin : sections
   BasePlugin : product
   BasePlugin : help(width)
   BasePlugin : fetch_config()
   BasePlugin : section_header

Public Properties and Methods
-----------------------------

The following are the public propeties and methods. The ``help_page`` and ``help()`` are the only implemented attributes, the rest need to be implemented by the inheriting classes.

.. _base-plugin-sections:
Sections
~~~~~~~~

The `sections` are a dictionary used by the help-page to create the screen-output. By defining this dictionary you are defining what the user will see when they enter::

    ape help <plugin-name>

.. _base-plugin-product:
The Product
~~~~~~~~~~~

This is the built object that client code will call. To make the interface uniform it is assumed that all parameters have been set and none will be passed to the __call__() method.

.. _base-fetch-config::
The Fetch Config
~~~~~~~~~~~~~~~~

The `fetch_config` method used to copy an example configuration file to the current working directory (thus its name). Since each plugin can provide its own sample, I decided that they should instead output them to standard out. Thus the user could do something like this::

    ape fetch > ape.ini
    ape fetch IperfSession >> ape.ini

And so on to add to a configuration file without clobbering the old one. Additionally, the APE looks for a `config_glob` option in the APE section so the other configuration files could be put in a separate file and shared by other APE configurations.    
   
.. autosummary:: 
   :toctree: api

   BasePlugin
   BasePlugin.sections
   BasePlugin.help_page
   BasePlugin.help
   BasePlugin.product
   BasePlugin.fetch_config

Aggregated Classes
------------------

These are the classes that the BasePlugin uses.

.. currentmodule:: ape.commoncode.baseclass
.. autosummary::
   :toctree: api

   BaseClass.logger

.. currentmodule:: ape.parts.helppage.helppage
.. autosummary::
   :toctree: api

   HelpPage
   HelpPage.__call__
     
<<name='BasePlugin', echo=False>>=
class BasePlugin(BaseClass):
    """
    An abstract base-class for plugins

    :param:

     - `configuration`: configuration-map for plugin configuration
    """
    __metaclass__ = ABCMeta
    def __init__(self, configuration=None, section_header=None):
        """
        BasePlugin constructor

        :param:

         - `configuration`: a ConfigObj for the product
         - `section_header`: header in the configuration for this plugin's info
        """
        super(BasePlugin, self).__init__()
        self._logger = None
        self._help = None
        self._config = None
        self._product = None
        self._help_page = None        
        self._sections = None
        self.configuration = configuration
        self.section_header = section_header
        return

    @abstractproperty
    def sections(self):
        """
        A (ordered) dictionary for the help page
        """
        return self._sections

    @property
    def help_page(self):
        """
        A HelpPage to use if self.sections has been defined
        """
        if self._help_page is None and self.sections is not None:
            self._help_page = HelpPage(sections=self.sections)
        return self._help_page                        

    def help(self, width=80):
        """
        Prints a help-string for the plugin

        :param:

         - `width`: number of characters wide to print help
        """
        if self.sections is None:
            print "'{0}' offers you no help. Such is life.".format(self.__class__.__name__)
        else:
            self.help_page.wrap = width
            self.help_page()
        return

    @abstractproperty
    def product(self):
        """
        Abstract Property: The plugin (Component implementation)
        """
        return

    @abstractmethod
    def fetch_config(self):
        """
        Abstract Method: Get sample config-file snippet required by this plugin
        """
        return   
# end class BasePlugin                
@

.. Module Graph
.. ------------
.. 
.. <<name='module_graph', echo=False, results='sphinx'>>=
.. if in_pweave:
..     from ape.plugins.base_plugin import BasePlugin
..     print "This is a module diagram for **{0}**.\n".format(BasePlugin.__module__)
..     this_file = os.path.join(os.getcwd(), 'base_plugin.py')
..     module_diagram_file = module_diagram(module=this_file, project='baseplugin')
..     print ".. image:: {0}".format(module_diagram_file)
.. 
.. @

.. Class Diagram
.. -------------
.. 
.. This is an auto-generated diagram of the BasePlugin class.
..     
.. <<name='class_diagram', echo=False, results='sphinx'>>=
.. if in_pweave:
..     class_diagram_file = class_diagram(class_name="BasePlugin",
..                                        filter='OTHER',
..                                        module=this_file)
..     print ".. image:: {0}".format(class_diagram_file)
.. @

BaseConfigurationConstants
--------------------------

A holder of constants for the ``BaseConfiguration`` so other code can reference them.

<<name='BaseConfigurationConstants', wrap=False>>=
class BaseConfigurationConstants(object):
    """
    Holder of BaseConfiguration constants
    """
    __slots__ = ()
    plugin_option ='plugin'
    updates_section_option = 'updates_section'
    error_name = 'ConfigurationError'
    bad_option_message = "Option '{option}' in section '{section}' failed validation (error='{error}', should be {option_type})"
    missing_option_message = "Option '{option}' in section '{section}' of type {option_type} for plugin '{plugin}' required but missing"
    missing_section_message = "Section '{section}' to configure '{plugin}' not found in configuration"
    missing_plugin_option_message = "'plugin' option missing in section '{0}'"
    extra_message = "Extra {item_type} in section '{section}. '{name}'"
    check_rep_failure_message = "Errors in section [{0}] in the configuration"
@

The BaseConfiguration Abstract Base Class
-----------------------------------------

The *BaseConfiguration* is an abstract base class that provides both implemented methods and properties as well as abstract properties which child classes must implement. The intention is for plugin-building classes to build on it so that there is a reasonably uniform pattern across these builders. It is also meant to be a bridge between ConfigObj and the components of the APE or other code that underlies an Ape-plugin. The implementation is based around how ConfigObj handles the expected form of the plugin configuration file sections.

.. uml::

   BaseClass <|-- BaseConfiguration
   BaseConfiguration o- validate.Validator
   BaseConfiguration o- configobj.ConfigObj
   BaseConfiguration o- BaseConfigurationConstants   

.. module:: ape.plugins.base_plugin
.. autosummary::
   :toctree: api   

   BaseConfiguration

Abstract Properties
~~~~~~~~~~~~~~~~~~~

There are two properties that inheriting classes need to implement or a *TypeError* will be raised when it is instantiated -- `configspec_source` and `product`.

.. autosummary::
   :toctree: api

   BaseConfiguration.configspec_source
   BaseConfiguration.product

configspec_source
+++++++++++++++++

The ``configspec_source`` property should be a string that specifies the form of the configuration for the plugin. The ConfigObj documentation on `validation <http://configobj.readthedocs.org/en/latest/configobj.html#validate>`_ has some information about it and the `validate <http://configobj.readthedocs.org/en/latest/validate.html#the-standard-functions>`_ documentation has a list of the functions that you can put in the configspec.

`plugin`
````````
 
The `plugin` option is used to match the configuration-file section with the plugin implementation so it is required (but there's no way to enforce it within the configuration classes so the configurations will have to defer to the ApePlugin itself to raise an error when no `plugin` option is found). The value for the `plugin` option should be the name of the plugin class (it's what the :ref:`QuarterMaster <ape-plugins-quartermaster>` uses as the key to the dictionary returned by the :ref:`RyeMother <ape-infrastructure-rye-mother>`).

`updates_section`
`````````````````

The `updates_section` option is used to point to a section to update. This is meant to allow plugins to use another section in the `PLUGINS` section of the configuration as a base and then override only some of the values. This way if some plugin is used multiple times (or more than one plugin shares the same configuration options) then one section can give the full configuration and the other section(s) can over-ride (or add) only the values that need to be changed.

Example
```````

As an example, suppose there is a plugin named `FakePlugin` that allows updating sections and has one required integer option ('age') and one optional string option ('name'). The configspec_source for this configuration might be::

    configspec_source = """
    plugin = option(FakePlugin)
    updates_section = string(default=None)

    age = integer
    name = string(default='Ted')

    [sub_section]
    hwp = boolean(default=False)
    """

The ``option(FakePlugin)`` specification requires that the term ``FakePlugin`` match exactly but as I mentioned it's used by the Ape to find the plugin configuration so if it's wrong then the configuration will never be validated anyway, but I figured it wouldn't hurt to have an extra check in there.

.. note:: There's no section name in the configspec. Since there can be multiple plugin configurations in the `PLUGINS` section the section for a particular plugin has to be extracted from the `PLUGINS` section first so it won't have the section header. This also means that any sub-sections added should start with first-level section headers (one-bracket pair, e.g. ``[sub_section]``).

.. '

An example configuration file might look like this.

.. code-block:: ini

    [OPERATIONS]
    operation_1 = fake_section
    
    [PLUGINS]
    [[fake_section]]
    plugin = FakePlugin

    age = 12
    name = Bob

    [[[sub_section]]]
    hwp = True

product
+++++++

The `product` should return the built object that will be called by the `operation` composite when the Ape is run.

Implemented Properties
~~~~~~~~~~~~~~~~~~~~~~

There are five implemented properties, but the user of the Configuration classes will probably never use them (only the ``product`` attribute is meant for users of these classes).

.. autosummary::
   :toctree: api
 
   BaseConfiguration.configspec
   BaseConfiguration.configuration   
   BaseConfiguration.plugin_name
   BaseConfiguration.section
   BaseConfiguration.validation_outcome
   BaseConfiguration.validator


configspec
++++++++++
 
.. figure:: figures/baseconfiguration_configspec_activity.png
   :align: center

   Activity diagram for the configspec creation.

This is a ConfigObj object that is created from the `configspec_source` and passed to the `configuration` when it is created so that it can be validated.
 

configuration
+++++++++++++

.. figure:: figures/baseconfiguration_configuration_activity.*
   :align: center

   The ``configuration`` activity diagram. 

The ``configuration`` is a `ConfigObj` object built from the ``source``, ``section_name``, and ``configspec`` properties. If the ``updatable`` property is set to True, then the configuration will be passed to the ``update`` method before being validated and setting the ``validation_outcome`` property as a side-effect. The validation was put in this property so that child-classes wouldn't have to do it as a separate step. This adds some redundancy if the ``validation_outcome`` is retrieved before the ``configuration`` is retrieved since the ``validation_outcome`` uses the ``configuration`` to call the `validate` method, but since validation is such an important thing, I decided it was worth it.

.. '

plugin_name
+++++++++++

.. figure:: figures/baseconfiguration_plugin_name_activity.*
   :align: center

   The ``plugin_name`` activity diagram.

The ``plugin_name`` property is the name of the plugin as extracted from the configuration. As mentioned elsewhere, the configurations won't be matched to the configuration section if this property is missing so this shouldn't raise an error, but if for some reason it really is missing then calling this property will raise a ``ConfigurationError``.

validation_outcome
++++++++++++++++++

The ``validation_outcome`` holds the object returned by `ConfigObj.validate`.

validator
+++++++++

The ``validator`` is a ``validate.Validator`` object. It's only used once but I put it here so I wouldn't have to patch-mock it when testing.

Methods
~~~~~~~

.. autosummary::
   :toctree: api

   BaseConfiguration.check_extra_values
   BaseConfiguration.check_rep
   BaseConfiguration.process_errors
   BaseConfiguration.update

check_extra_values
++++++++++++++++++

.. figure:: figures/check_extra_values_activity.*
   :align: center

   check_extra_values activity diagram

The ``check_extra_values`` method uses the ``configobj.get_extra_values`` function to get the parts of the configuration that weren't defined in the ``configspec``. It logs the items it finds and then returns True if unrecognized items were in fact found in the configuration. The BaseConfiguration doesn't use this itself because I assume that some plugins won't care if there are extra items (like the Dummy). It takes a single parameter (``warn_users``) that, if True (the default) will log the items found at the `warning` level, otherwise it logs them at the `debug` level.

.. '

check_rep
+++++++++

.. figure:: figures/baseconfiguration_check_rep_activity.*
   :align: center

   check_rep activity diagram

The ``check_rep`` method calls the ``process_errors`` method and the ``check_extra_values`` method, and if either returns True then ``check_rep`` raises a ``ConfigurationError``. Child classes like the Dummy that don't car about extra values should override this method.

.. '

process_errors
++++++++++++++

.. figure:: figures/baseconfiguration_process_errors_activity.*
   :align: center

   process_errors activity diagram
   
<<name='BaseConfiguration', echo=False>>=
class BaseConfiguration(BaseClass):
    """
    Abstract base class for configurations
    """
    __metaclass__ = ABCMeta
    def __init__(self, source, section_name, configspec_source=None,
                 updatable=True, constants=None):
        """
        BaseConfiguration constructor

        :param:

         - `source`: ConfigObj section
         - `section_name`: section-name in the configuration
         - `configspec_source`: string with configuration specification (use to override the default)
         - `updatable`: if True, allows updating from other sections
         - `constants`: object with same properties as BaseConfigurationConstants
        """
        super(BaseConfiguration, self).__init__()
        self._constants = constants
        self.section_name = section_name
        self.source = source
        self.updatable = updatable
        self._configspec_source = configspec_source
        self._sample = None
        self._product = None
        self._validator = None
        self._configspec = None
        self._configuration = None
        self._plugin_name = None
        self._validation_outcome = None
        self._constants
        return

    @abstractproperty
    def configspec_source(self):
        """
        abstract: implement as configspec string
        """

    @property
    def sample(self):
        if self._sample is None:
            sample = self.configspec_source.lstrip('\n')
            sample = sample.replace('[', '[[[')
            sample = sample.replace(']', ']]]')
            self._sample = '[[{0}]]\n'.format(self.section_name) + sample
        return self._sample

    @property
    def constants(self):
        """
        object with string constants (see BaseConfigurationConstants)
        """
        if self._constants is None:
            self._constants = BaseConfigurationConstants
        return self._constants

    @property
    def validation_outcome(self):
        """
        Outcome of validating the configuration
        """
        if self._validation_outcome is None:
            self._validation_outcome = self.configuration.validate(self.validator,
                                                                   preserve_errors=True)
        return self._validation_outcome

    @property
    def plugin_name(self):
        """
        Gets the plugin name from the section

        :raise: configuration error if plugin name is missing
        """
        if self._plugin_name is None:        
            try:
                self._plugin_name = self.configuration[self.constants.plugin_option]
            except KeyError as error:
                self.logger.bebug(error)
                self.log_error(self.constants.missing_plugin_option_message.format(self.section_name))
                raise ConfigurationError(self.constants.missing_plugin_option_message.format(self.section_name))
        return self._plugin_name

    @property
    def validator(self):
        """
        validator for the configuration
        """
        if self._validator is None:
            self._validator = Validator()
        return self._validator

    @property
    def configspec(self):
        """
        A configspec built from configspec_source for validation
        """
        if self._configspec is None:
            # avoiding side-effects if there's a splitlines call
            configspec_source = self.configspec_source
            
            if type(self.configspec_source) is StringType:
                configspec_source = configspec_source.splitlines()
            self._configspec = ConfigObj(configspec_source,
                                         list_values=False,
                                         _inspec=True)
        return self._configspec
            
    @property
    def configuration(self):
        """
        validates and sets the configuration using the source configuration

        :precondition: self.configspec has full configspec including section name
        :return:  validated configuration for this section
        """
        if self._configuration is None:
            section = ConfigObj(self.source[self.section_name],
                                    configspec=self.configspec,
                                    file_error=True)        
            if self.updatable:
                section = self.update(section)

            self._configuration = section
            self._validation_outcome = self._configuration.validate(self.validator,
                                                                preserve_errors=True)
        return self._configuration

    @abstractproperty
    def product(self):
        """
        abstract: implement as built object for the ape to call
        """
        return

    def update(self, section):
        """
        Uses 'updates_section' to build configuration from other section

        :param:

         - `section`: plugin-section to update

        :return: section merged with this section or original if appropriate 
        """
        if (self.constants.updates_section_option in section
            and section[self.constants.updates_section_option] is not None ):       
            other_section = section[self.constants.updates_section_option]
            base_section = ConfigObj(self.source[other_section],
                                     configspec=self.configspec)
            base_section.merge(section)
            section = base_section
        return section
        
    def process_errors(self):
        """
        processes configuration, validation_outcome and logs the errors

        :return: True if there were errors (same as `not self.validation_outcome`)
        """
        flattened_errors = flatten_errors(self.configuration,
                                           self.validation_outcome)

        for sections, option, error in flattened_errors:
            section = ",".join(sections)
            if len(section):
                section = "{0},{1}".format(self.section_name, section)
            else:
                section = self.section_name

            if option is not None: # something is wrong with the option
                # if there are sub-sections then the configspec has to be traversed to get the option-type
                spec = self.configspec
                for section in sections:
                    spec = spec[section]
                option_type = spec[option]
                
                if error: # validation of option failed                    
                    self.log_error(error=self.constants.error_name,
                                   message=self.constants.bad_option_message.format(option=option,
                                                                                    section=section,
                                                                                    error=error,
                                                                                    option_type=option_type))
                else: # missing option
                    self.log_error(error=self.constants.error_name,
                                   message=self.constants.missing_option_message.format(option=option,
                                                                                   section=section,
                                                                                   option_type=option_type,
                                                                                   plugin=self.plugin_name))
            else: # section missing
                self.log_error(error=self.constants.error_name,
                               message=self.constants.missing_section_message.format(section=section,
                                                                                plugin=self.plugin_name))
        return not self.validation_outcome is True

    def check_extra_values(self, warn_user=True):
        """
        checks the configuration for values not in the configspec

        :return: True if extra values, false otherwise
        """
        if warn_user:
            logger = self.logger.warning
        else:
            # in case the plugin does not care
            logger = self.logger.debug
            
        extra_values = get_extra_values(self.configuration)

        for sections, name in extra_values:
            # sections is a tuple of all the sections and subsections
            # leading to the option so we have to get to the bottom
            bottom_section = self.configuration
            for section in sections:
                bottom_section = bottom_section[section]

            # value is the extra item (either a value or section)
            value = bottom_section[name]
            
            item_type = 'option'
            if isinstance(value, dict):
                item_type = 'section'
            
            section = ','.join(sections)
            if len(section):
                section = "{0},{1}".format(self.section_name, section)
            else:
                section = self.section_name
            message = self.constants.extra_message.format(section=section,
                                                          item_type=item_type,
                                                          name=name)
            if item_type == 'option':
                message += "='{0}'".format(value)
            logger(message)
                 
        return len(extra_values) > 0

    def check_rep(self):
        """
        Calls process_errors

        :raise: ConfigurationError if errors are found (or there are unknown options)
        """
        if self.process_errors() or self.check_extra_values():
            self.logger.info('Expected Configuration Matching:\n{0}'.format(self.sample))
            raise ConfigurationError(self.constants.check_rep_failure_message.format(self.section_name))
        return            
# end BaseConfiguration        
@
