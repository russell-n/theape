Sorted List
===========

This is a Data Collection that extends the List ADT to have an `insort` method that will insert an item in sorted order. If `append` or other non-sorting methods are used than this will not do anything meaningful, but if only insort is used or a `sort` is called after many appends, then the `insort` will maintain the ordering.
<<name='imports', echo=False>>=
# python standard library
from bisect import insort
@
.. currentmodule:: bisect
.. autosummary::
   :toctree: api

   bisect
   bisect.insort

.. uml::
   
   SortedList -|> list
   SortedList : insort(item)

<<name='SortedList', echo=False>>=
class SortedList(list):
    """
    Extends the `list` built-in with `insort`
    """
    def __init__(self, *args, **kwargs):
        """
        Sorted List Constructor 
        """
        super(SortedList, self).__init__(*args, **kwargs)
        return

    def insort(self, item):
        """
        Inserts item into list in sorted order
        """
        insort(self, item)
        return
@
<<name='test_imports', echo=False>>=
import unittest
import random
@
<<name='TestSortedList', echo=False>>=
class TestSortedList(unittest.TestCase):
    def setUp(self):
        self.collection = SortedList()
        return

    def test_insort(self):
        test = [random.randrange(0, 100) for item in xrange(100)]
        for item in test:
            self.collection.insort(item)
        self.assertEqual(sorted(test), self.collection)
@
<%
for case in (TestSortedList, ):
    suite = unittest.TestLoader().loadTestsFromTestCase(case)    
    unittest.TextTestRunner(verbosity=2).run(suite)
%>
.. currentmodule:: ape.commoncode.sortedlist
.. autosummary::
   :toctree: api

   SortedList
   SortedList.insort

