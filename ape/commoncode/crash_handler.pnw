Crash Handler
=============

This is a module to help with catching exceptions.

<<name='imports', echo=False>>=
# this package
from ape.commoncode.strings import RED, BOLD, RESET
@

.. _try-except-decorator:
The try-except Decorator
------------------------

This decorator allows exceptions to be caught and logged, rather than allowing the interpreter to dump the stack-trace (it still logs and displays the stack-trace).

.. autosummary::
   :toctree: api

   try_except
   

This wraps methods, not functions (it uses `self`). `self` must have access to `self.error` (the exception to trap), `self.error_message` a string to put in the title of the error message` and `self.logger` a logging instance to send error messages to. Since it is catching exceptions, any method wrapped with this won't raise an error if the exception in self.error is raised by code it is running.

.. superfluous '

I have now added a call to a  `self.clean_up` method after an exception is caught so users of this decorator should have that implemented as well.

<<name='try_except', echo=False>>=
def try_except(method):
    """
    A decorator method to catch Exceptions

    :param:

     - `func`: A function to call
    """
    def wrapped(self, *args, **kwargs):
        try:
            return method(self, *args, **kwargs)
        except self.error as error:
            if hasattr(self, 'clean_up'):
                self.clean_up(error)
            else:
                log_error(error, self.logger, self.error_message)
    return wrapped
@

.. autosummary::
   :toctree: api

   error_message

<<name='error_message', echo=False>>=
def log_error(error, logger, error_message):
    """
    Logs the error
    """
    red_error = "{red}{bold}{{name}}: {reset}{red}{{msg}}{reset}".format(red=RED,
                                                                         bold=BOLD,
                                                                         reset=RESET)
    crash_notice = "{bold}********** {msg} **********{reset}".format(red=RED,
                                                                     msg=error_message,
                                                                     bold=BOLD,
                                                                     reset=RESET)
    logger.error(crash_notice)
            
    import traceback
    import sys
    import os
            
    exc_type, exc_value, exc_tb = sys.exc_info()
    tb_info = traceback.extract_tb(exc_tb)
    filename, linenum, funcname, source = tb_info[-1]

    error_message = red_error.format(name=error.__class__.__name__,
                                        msg=error)

    logger.error(error_message)
    logger.error(red_error.format(name="Failed Line",
                                               msg = source))
    logger.error(red_error.format(name="In Function",
                                               msg=funcname))
    logger.error(red_error.format(name="In File",
                                               msg=os.path.basename(filename)))
    logger.error(red_error.format(name="At Line",
                                               msg=linenum))
    logger.debug(traceback.format_exc())
    return
@
