The Countdown
=============

The Countdown Timers are meant to be used by the composites and components to keep track of elapsed (and sometimes remaining) time. The :ref:`Time Tracker <ape-parts-countdown-timetracker>` is used to keep track of how long execution is taking. This is meant primarily for someone wanting to estimate future times by looking at past logs. The :ref:`CountDown Timer <ape-parts-countdown-countdowntimer>` also keeps track of execution time but is meant to also keep track of whether the composite should repeat or not (based on remaining repetitions or time).

Contents:

    * :ref:`TimeTracker <ape-parts-countdown-timetracker>`

    * :ref:`CountdownTimer <ape-parts-countdown-countdowntimer>`


.. currentmodule:: ape.parts.countdown.countdown

<<name='imports', echo=False>>=
# python standard library
import datetime
from datetime import timedelta

# third party
import numpy

# this package
from ape import BaseClass, ApeError
@

<<name='constants', echo=False>>=
DEBUG = 'debug'
INFO = 'info'
STAT_STRING = 'Time Stats -- Min: {min}, Q1: {q1}, Med: {med}, Q3: {q3}, Max: {max}, Mean: {mean}, StD: {std}'
ELAPSED_STRING = 'Elapsed Time: {0}'
TOTAL_ELAPSED_STRING = '({0}) Elapsed Time: {1}'
MIN_PERCENTILE = 0
Q1_PERCENTILE = 25
MEDIAN_PERCENTILE = 50
Q3_PERCENTILE = 75
MAX_PERCENTILE = 100

CONTINUE = True
STOP = False
NOT_SET = None
UNSET = None
DECREMENT = -1
FINISHED = 0
ANNIHILATE = None
@

.. _ape-parts-countdown-timetracker:

The TimeTracker
---------------

Responsibilities
~~~~~~~~~~~~~~~~

The TimeTracker:

    * Tracks start time, stop time, elapsed times

    * Logs min, Q1, median, Q3, max elapsed times

    * Returns True when running and False when stopped at __call__

The Model
~~~~~~~~~

.. uml::

   BaseClass <|-- TimeTracker
   TimeTracker : Bool __call__()
   TimeTracker : start
   TimeTracker : elapsed_times
   TimeTracker : __init__(log_level)

.. currentmodule:: ape.parts.countdown.countdown
.. autosummary::
   :toctree: api

   TimeTracker.__init__
   TimeTracker.log
   TimeTracker.append
   TimeTracker.percentile
   TimeTracker.__call__

   
<<name='TimeTracker', echo=False>>=
class TimeTracker(BaseClass):
    """
    A tracker of elapsed time
    """
    def __init__(self, log_level=DEBUG):
        """
        :param: `log_level`: level at which to report elapsed times (default='debug')
        """
        super(TimeTracker, self).__init__()
        self._logger = None
        self.log_level = log_level
        self.start = None
        self._times = None
        self._log = None
        return

    @property
    def times(self):
        """
        collection of elapsed times
        """
        if self._times is None:
            self._times = []
        return self._times

    @times.setter
    def times(self, times):
        """
        :param: ``times`` - collection
        :postcondition: self._times set to times
        """
        self._times = times
        return

    @property
    def log(self):
        """
        The logger method indicated by the log_level

        :return: logger.debug or logger.info
        """
        if self._log is None:
            if self.log_level == INFO:
                self._log = self.logger.info
            elif self.log_level == DEBUG:
                self._log = self.logger.debug
            else:
                raise ApeError("Unknown log level: {0}".format(self.log_level))
        return self._log
        

    def append(self, item):
        """
        Appends the item to the times array

        :param:

         - `item`: item to append to self.times (a numpy array)

        :postcondition: self.times contains item
        """
        self.times = numpy.append(self.times, [item])
        return

    def percentile(self, percentile):
        """
        calculates the percentile (e.g. 50 gets the median (the 50% item))

        :return: value for percintile of self.times as a timedelta
        """
        return timedelta(seconds=numpy.percentile(self.times, percentile))

    def __call__(self):
        """
        The main interface - starts and stops (toggles) the timer

        :return: True if starting, False if stopping
        :postcondition: elapsed time logged and added to self.times
        """
        if self.start is None:
            self.start = datetime.datetime.now()            
            return True
        elapsed = datetime.datetime.now() - self.start
        # numpy can't handle timedeltas
        self.append(elapsed.total_seconds())
        self.start = None
        self.log(ELAPSED_STRING.format(elapsed))
        self.log(STAT_STRING.format(min=self.percentile(MIN_PERCENTILE),
                                    q1=self.percentile(Q1_PERCENTILE),
                                    med=self.percentile(MEDIAN_PERCENTILE),
                                    q3=self.percentile(Q3_PERCENTILE),
                                    max=self.percentile(MAX_PERCENTILE),
                                    mean=timedelta(seconds=numpy.mean(self.times)),
                                    std=timedelta(seconds=numpy.std(self.times))))
        return False
@

The expected way to use the TimeTracker is as a sentinal in a while loop::

   
   def run(self):
       # assumes self.t is a TimeTracker instance
       while self.t():
           time.sleep(1)
       return

This would append a timedelta of about 1 second to the TimeTracker's times array everytime ``run`` is called, and log the current elapsed time and the basic running statistics (which in this case shouldn't show any variance)


.. _ape-parts-countdown-countdowntimer:

The CountdownTimer
------------------

The CountdownTimer is an extension of the TimeTracker that takes a `repetitions` value and decrements it on each call, returning True until it is less than or equal to 0.

.. note:: Because I decrement after the start-time is set, this will always return True on the first call (it assumes you want at least one repetition).

.. uml::

   TimeTracker <|-- CountdownTimer
   CountdownTimer : __call__()

.. currentmodule:: ape.parts.countdown.countdown
.. autosummary::
   :toctree: api

   CountdownTimer

<<name='CountdownTimer', echo=False>>=
class CountdownTimer(TimeTracker):
    """
    A time-tracker that counts down
    """
    def __init__(self, repetitions=1, end_time=None, total_time=None,
                 *args, **kwargs):
        """
        :param:

         - ``repetitions``: number of calls to accept before stopping
         - ``end_time``: datetime to stop
         - ``total_time``: timedelta for amount of time to run
        """
        super(CountdownTimer, self).__init__(*args, **kwargs)
        self.repetitions = repetitions
        self.end_time = end_time
        self.total_time = total_time
        self.last_time = None
        return

    def time_remains(self):
        """
        Evaluates if there is still time (or repetitions) remaining

        :return: True if reps or time remains, False otherwise
        """
        if self.end_time is not UNSET:
            return datetime.datetime.now() < self.end_time

    def __call__(self):
        """
        The main interface. Each call re-starts the timer and decrements the repetitions

        :return: True if repetitions > 0, False otherwise
        """
        call_time = datetime.datetime.now()
        
        if self.start is NOT_SET:
            self.start = self.last_time = call_time
            return CONTINUE

        # convert to seconds so numpy can calculate statistics
        self.append((call_time - self.last_time).total_seconds())
        self.log_update(call_time - self.last_time)
        self.last_time = call_time

        self.repetitions += DECREMENT

        if self.repetitions <= FINISHED:
            self.log_update(call_time - self.start)
            self.start = NOT_SET
            self._times = ANNIHILATE
            return False
        return CONTINUE

    def log_update(self, elapsed):
        """
        Outputs to the log the most recent elapsed time information

        :param:

         - `elapsed`: timedelta
        """

        elapsed_string = ELAPSED_STRING.format(elapsed)
        self.log(elapsed_string)
        self.log(STAT_STRING.format(min=self.percentile(MIN_PERCENTILE),
                                    q1=self.percentile(Q1_PERCENTILE),
                                    med=self.percentile(MEDIAN_PERCENTILE),
                                    q3=self.percentile(Q3_PERCENTILE),
                                    max=self.percentile(MAX_PERCENTILE),
                                    mean=timedelta(seconds=numpy.mean(self.times)),
                                    std=timedelta(seconds=numpy.std(self.times))))
        return

    def close(self):
        """
        Resets the attributes (makes __call__ always evaluate to false, not once like default)

        :postcondition:

         - ``self.end_time`` is None
         - ``self.total_time`` is None
         - ``self.repetitions`` is 0
         - ``self.start`` is None
        """
        self.start = UNSET
        self.end_time = UNSET
        self.total_time = UNSET
        self.repetitions = 0
        return
# end class CountdownTimer
@
