The List Sub-Command Arguments
==============================
<<name='docstring', wrap=False>>=
"""list subcommand

usage: ape list -h
       ape list [<module> ...]

Positional Arguments:
  <module> ...  Space-separated list of importable module with plugins

optional arguments:

  -h, --help                 Show this help message and exit

"""
@

See the :ref:`developer documentation <docopt-reproducingape-list-sub-command>` for more information.

Contents:

    * :ref:`The List Arguments Constants <ape-interface-arguments-list-arguments-constants>`
    * :ref:`The List Arguments Class <ape-interface-arguments-list-arguments-class>`
    * :ref:`The List Strategy <ape-interface-arguments-list-strategy>`

<<name='imports', echo=False>>=
# the ape
from ape.commoncode.crash_handler import try_except
from ape.interface.arguments.arguments import BaseArguments
from ape.interface.arguments.basestrategy import BaseStrategy
@

.. _ape-interface-arguments-list-arguments-constants:

The ListArguments Constants
---------------------------

<<name='ListArgumentsConstants'>>=
class ListArgumentsConstants(object):
    """
    Constants for the list sub-command arguments
    """
    __slots__ = ()
    # arguments
    modules = "<module>"
@

.. _ape-interface-arguments-list-arguments-class:

The ListArguments Class
-----------------------

.. uml::

   BaseArguments <|-- ListArguments

.. currentmodule:: ape.interface.arguments.listarguments
.. autosummary::
   :toctree: api

   ListArguments
   ListArguments.modules
   ListArguments.reset
   ListArguments.function

<<name='ListArguments', echo=False>>=
class ListArguments(BaseArguments):
    """
    Arguments and options for the `list` sub-command.
    """
    def __init__(self, *args, **kwargs):
        super(ListArguments, self).__init__(*args, **kwargs)
        self._modules = None
        self.sub_usage = __doc__
        self._function = None
        return

    @property
    def function(self):
        """
        The `list` sub-command
        """
        if self._function is None:
            self._function = ListStrategy().function
        return self._function

    @property
    def modules(self):
        """
        List of external modules holding plugins
        """
        if self._modules is None:
            self._modules = self.sub_arguments[ListArgumentsConstants.modules]
        return self._modules

    def reset(self):
        """
        Resets the attributes to None
        """
        super(ListArguments, self).reset()
        self._modules = None
        return
# end ListArguments
@


.. _ape-interface-arguments-list-strategy:

The List Strategy
-----------------

.. uml::

   BaseStrategy <|-- ListStrategy

.. currentmodule:: ape.interface.arguments.listarguments
.. autosummary::
   :toctree: api

   ListStrategy
   ListStrategy.function

<<name='ListStrategy', echo=False>>=
class ListStrategy(BaseStrategy):
    """
    The strategy for the 'list' sub-command
    """    
    @try_except
    def function(self, args):
        """
        The function to run for this strategy (instead of the ArgParse sub-command function).
        Uses the QuarteMaster to list the plugins

        :param:

         - `args`: object with `modules` attribute
        """
        self.quartermaster.external_modules = args.modules
        self.quartermaster.list_plugins()
        return
@

