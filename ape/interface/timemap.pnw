Time Maps
=========


.. _relative-time-map:

Relative Time Map
-----------------

The `RelativeTimeMap` maps strings of relative times to seconds. It tries to be as liberal as possible so there has to be a fair amount of certainty that the string is in fact a time and not something similar but different. '5 yolks' will match '5' years, for instance, and if that is not the desired behavior then something else has to do a check first to filter out bad strings.

It uses `dateutil <http://labix.org/python-dateutil>`_ to calculate everything but the seconds because dateutil will handle the ambiguous values like years (which have leap-years) and months which have 28, 29, 30, or 31 days.

Contents:

   * :ref:`The UML Class Model <relative-time-map-model>`

   * :ref:`Relative Time Map Group Names <relative-time-map-groups>`

   * :ref:`The RelativeTime class <ape-relative-time>`

.. _relative-time-map-model:

The UML Model
-------------

.. uml::

   RelativeTimeMap --|> BaseClass
   RelativeTimeMap : re.RegexObject year_expression
   RelativeTimeMap : re.RegexObject month_expression
   RelativeTimeMap : re.RegexObject week_expression
   RelativeTimeMap : re.RegexObject day_expression
   RelativeTimeMap : re.RegexObject hour_expression
   RelativeTimeMap : re.RegexObject minute_expression
   RelativeTimeMap : re.RegexObject second_expression      
   
.. currentmodule:: ape.interface.timemap
.. autosummary::
   :toctree: api

   RelativeTimeMap
   
<<name='imports', echo=False>>=
# python standard library
import re

# this package
from ape import BaseClass
from ape.commoncode.oatbran import CharacterClass, Numbers, Group
from ape.commoncode.oatbran import CommonPatterns
@

<<name='constants', echo=False>>=
ZERO = '0'
MICRO = 10**6
@

.. _relative-time-map-groups:

Relative Time Map Groups
------------------------

<<name='RelativeTimeMapGroups', echo=False>>=
class RelativeTimeMapGroups(object):
    __slots__ = ()
    years = 'years'
    months = 'months'
    weeks = 'weeks'
    days = 'days'
    hours = 'hours'
    minutes = 'minutes'
    seconds = 'seconds'
# end RelativeTimeMapGroups    
@

<<name='RelativeTimeMap', echo=False>>=
class RelativeTimeMap(BaseClass):
    """
    A converter from strings with relative times to seconds
    """
    def __init__(self):
        super(RelativeTimeMap, self).__init__()
        self._year_expression = None
        self._month_expression = None
        self._week_expression = None
        self._day_expression = None
        self._hour_expression = None
        self._minute_expression = None
        self._second_expression = None
        return

    @property
    def year_expression(self):
        """
        A compiled regex to match a year (only checks for y)
        """
        if self._year_expression is None:
            self._year_expression = re.compile(Group.named(name=RelativeTimeMapGroups.years,
                                                           expression=Numbers.real) +
                                                            CommonPatterns.optional_spaces +
                                                            CharacterClass.character_class('Yy')
                                                            )
        return self._year_expression

    @property
    def month_expression(self):
        """
        A compiled regex to match a month (check for 'mo' only)
        """
        if self._month_expression is None:
            self._month_expression = re.compile(Group.named(name=RelativeTimeMapGroups.months,
                                                            expression=Numbers.real) +
                CommonPatterns.optional_spaces +
                CharacterClass.character_class('Mm') +
                CharacterClass.character_class('Oo'))
        return self._month_expression

    @property
    def week_expression(self):
        """
        A compiled regex to extract a number of weeks
        """
        if self._week_expression is None:
            self._week_expression = re.compile(Group.named(name=RelativeTimeMapGroups.weeks,
                                                           expression=Numbers.real) +
                                                           CommonPatterns.optional_spaces +
                                                           CharacterClass.character_class('Ww'))
        return self._week_expression

    @property
    def day_expression(self):
        """
        A compiled regex to extract the number of days
        """
        if self._day_expression is None:
            self._day_expression = re.compile(Group.named(name=RelativeTimeMapGroups.days,
                                                          expression=Numbers.real) +
                                                          CommonPatterns.optional_spaces +
                                                          CharacterClass.character_class('Dd'))
        return self._day_expression

    @property
    def hour_expression(self):
        """
        A compiled regex to extract the number of hours
        """
        if self._hour_expression is None:
            self._hour_expression = re.compile(Group.named(name=RelativeTimeMapGroups.hours,
                                                           expression=Numbers.real) +
                                                           CommonPatterns.optional_spaces +
                                                           CharacterClass.character_class('Hh'))
        return self._hour_expression

    @property
    def minute_expression(self):
        """
        A compiled regex to extract the number of minutes
        """
        if self._minute_expression is None:
            self._minute_expression = re.compile(Group.named(name=RelativeTimeMapGroups.minutes,
                                                             expression=Numbers.real) +
                                                             CommonPatterns.optional_spaces +
                                                             CharacterClass.character_class('Mm') +
                                                             CharacterClass.character_class('Ii'))
        return self._minute_expression

    @property
    def second_expression(self):
        """
        A compiled regex to extract the number of seconds
        """
        if self._second_expression is None:
            self._second_expression = re.compile(Group.named(name=RelativeTimeMapGroups.seconds,
                                                             expression=Numbers.real) +
                                                             CommonPatterns.optional_spaces +
                                                             CharacterClass.character_class('Ss'))
        return self._second_expression
#end class RelativeTimeMap
@

.. _ape-relative-time:

The RelativeTime
----------------

This is an attempt to extend the `timedelta` with weeks, hours, and minutes. The original intention was to also allow months and years, requiring the use of the `dateutil` package, but at this point I can't see an immediate use for it, so I'll stop at weeks, since it doesn't need special cases the way months and years do.

.. '

.. uml::

   RelativeTime -|> BaseClass
   RelativeTime o-- RelativeTimeMap
   RelativeTime : __init__(source)
   RelativeTime : int weeks
   RelativeTime : int days
   RelativeTime : int hours
   RelativeTime : int minutes
   RelativeTime : int seconds
   RelativeTime : int microseconds
   RelativeTime : datetime.timedelta
   RelativeTime : float total_seconds

By and large the intention is to use this like a time-delta object but with extra fields, so the operators will be overloaded too.

.. autosummary::
   :toctree: api

   RelativeTime
   RelativeTime.time_map

<<name='RelativeTime', echo=False>>=
class RelativeTime(BaseClass):
    """
    A timedeltas extension
    """
    def __init__(self, source):
        """
        RelativeTime constructor

        :param:

         - `source`: A string with relative time in it (e.g. '1week 2 days 4.2 seconds')
        """
        super(RelativeTime, self).__init__()
        self.microseconds = 0
        self._time_map = None
        self._source = None
        self.source = source
        return

    @property
    def source(self):
        """
        :return: the source string
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        sets the source and all the time values
        """
        self._source = source
        self.populate_fields()
        return
    
    @property
    def time_map(self):
        """
        A relative time map instance to parse the source.
        """
        if self._time_map is None:
            self._time_map = RelativeTimeMap()
        return self._time_map

    def integer_fraction(self, expression, group_name):
        """
        Gets the token from self._source using expression, converts to integer and fraction (mantissa)

        :return: quotient, remainder or 0,0 if expression doesn't match
        """
        match = expression.search(self._source)
        if match is not None:
            number = match.group(group_name)
            if '.' in number:
                integer, fraction = number.split('.')
                quotient = int(integer)
                if len(fraction):
                    remainder = int(fraction)
                else:
                    remainder = 0
            else:
                quotient, remainder = int(number), 0
            self.logger.debug('q,r = {0},{1} (source={2})'.format(quotient, remainder, number))
            return quotient, remainder
        self.logger.debug("{0} not found in {1}".format(expression, self._source))
        return 0,0 
        
    def populate_fields(self):
        """
        populates the time fields with values (e.g. self.minutes)
        """
        self.seconds, fraction = self.integer_fraction(self.time_map.second_expression, RelativeTimeMapGroups.seconds)
        self.microseconds = int(fraction * MICRO)
        return

# end class RelativeTime    
@
