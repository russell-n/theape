Exploring ConfigParser
======================
.. _exploring-configparser:

Contents:

    * :ref:`SafeConfigParser Reference <exploring-configparser-safeconfigparser>`        

    * :ref:`Case-Sensitivity <exploring-configparser-case-sensitivity>`

    * :ref:`Reading Multiple Files <exploring-configparser-read>`

    * :ref:`Defaults <exploring-configparser-defaults>`

    * :ref:`The Whole Shebang <exploring-configparser-whole-shebang>`

.. _exploring-configparser-safeconfigparser:
SafeConfigParser Reference
--------------------------

.. currentmodule:: ConfigParser
.. autosummary::
   :toctree: api

   SafeConfigParser
   SafeConfigParser.read
   SafeConfigParser.has_section
   SafeConfigParser.has_option
      
<<name='imports', echo=False>>=
# python standard library
from ConfigParser import SafeConfigParser
import ConfigParser
import glob
import os

# this package
from ape.commoncode.code_graphs import module_diagram
@
<<name='constants', echo=False>>=
FILE_1 = 'config_1.ini'
FILE_2 = 'config_2.ini'
FILE_3 = 'config_3.ini'
FILE_4 = 'config_4.ini'
SAMPLE_BASE = 'sample_a.ini'
@

We can see how the SafeConfigParser is built using a module graph of a class made here:

<<name='FakeClass', wrap=False>>=
class FakeConfigParser(SafeConfigParser):
    pass
@

<<name='module_graph', echo=False, results='sphinx'>>=
this_file = os.path.join(os.getcwd(), 'explore_configparse.py')
module_diagram_file = module_diagram(module=this_file, project='exploreconfigparse')
print ".. image:: {0}".format(module_diagram_file)
@

.. _exploring-configparser-case-sensitivity:
Are options and sections case-sensitive?
----------------------------------------

The config-file:

.. literalinclude:: config_1.ini

<<name='create_parser', wrap=False>>=
case_config = SafeConfigParser()
case_config.read(FILE_1)
@

Section Case
~~~~~~~~~~~~

<<name='test_section', wrap=False>>=
print "Matches section camel-case: {0}".format(case_config.has_section('CamelCase'))
print "Matches section all-caps: {0}".format(case_config.has_section('CAMELCASE'))
@

Option Case
~~~~~~~~~~~

<<name='test_option_case', wrap=False>>=
print "Matches option camel-case: {0}".format(case_config.has_option('CamelCase', 'OptionOne'))
print "Matches option all-lower: {0}".format(case_config.has_option('CamelCase', 'optionone'))
@

So it looks like section-names are case-sensitive but option-names are not. What does `optionxform` do?

optionxform
~~~~~~~~~~~

.. autosummary::
   :toctree: api

   SafeConfigParser.optionxform

<<name='test_optionxform', wrap=False>>=
case_config.optionxform = str
print "Matches option camel-case: {0}".format(case_config.has_option('CamelCase', 'OptionOne'))
print "Matches option all-lower: {0}".format(case_config.has_option('CamelCase', 'optionone'))
@

What?

<<name='optionxform_options', wrap=False>>=
print case_config.options('CamelCase')
@

So it looks like by default `ConfigParser` casts the options to lower-case when they are read in, but since I changed it to be case-sensitive (passing in ``str`` means it uses string-equality to find the option) after reading in the file, it will only match lower-cased option names.

<<name='optionxform_2', wrap=False>>=
case_config.read(FILE_1)
print "Matches option camel-case: {0}".format(case_config.has_option('CamelCase', 'OptionOne'))
print "Matches option all-lower: {0}".format(case_config.has_option('CamelCase', 'optionone'))
print case_config.options('CamelCase')
@

Well, that wasn't what I was expecting, but it is good to know -- if you read in a file it adds to the existing section rather than replacing it. One more time.

.. superfluous '

<<name='optionxform_3', wrap=False>>=
case_config.remove_section('CamelCase')
case_config.read(FILE_1)
print "Matches option camel-case: {0}".format(case_config.has_option('CamelCase', 'OptionOne'))
print "Matches option all-lower: {0}".format(case_config.has_option('CamelCase', 'optionone'))
print case_config.options('CamelCase')
@

Well, that was harder than I thought it would be, but the discovery that the options append leads to the next section.

.. _exploring-configparser-read:
What happens when you use ``read`` more than once?
--------------------------------------------------

If I read the same file twice, what happens to it?

First a print function to create tables for the output:
    
<<name='print_config'>>=
HEADER = """
.. csv-table:: {section}
   :header: Option,Value

"""

LINE = "   {option},{value}"

def print_config(parser):
    """
    Sends a rst csv-table to stdout

    :param:

     - `parser`: loaded ConfigParser
    """
    try:
        for section in sorted(parser.sections()):
            print HEADER.format(section=section)
            for option,value in parser.items(section):
                print LINE.format(option=option,
                                  value=value)
    except ConfigParser.Error as error:
        print error
    return
@

Now I read the file twice:

<<name='read_same_file', wrap=False>>=
safe_config = SafeConfigParser()
safe_config.read((FILE_1, FILE_1))
@
<<name='print_read_same_file', echo=False, results='sphinx'>>=
print_config(safe_config)
@

That doesn't seem to do anything (so it's safe, as long as you don't mess with the case the way I did). What if you load a similar but different file?

.. superfluous '

The new file:

.. literalinclude:: config_2.ini

Now I read the new file:

<<name='append_file', wrap=False>>=
safe_config.read(FILE_2)
@
<<name='print_append', echo=False, results='sphinx'>>=
print_config(safe_config)
@

It appears to behave just like a dictionary (and if you look at the diagram above you can see that the `_sections` attribute is an `OrderedDict`) -- if the section or option exists, it changes the value, if it doesn't it adds the section/option and the value.

.. superfluous '

.. _exploring-configparser-defaults:
How does the DEFAULT section work?
----------------------------------

While somewhat dangerous, using default values can be convenient and can make a file easier to read an maintain. The main drawback, I think, is that if you intend to give this to a non-programmer, trying to troubleshoot errors might be more than they want to deal with. But I suppose that's true of most anything.

.. superfluous '

Does it matter where you put it?

The config-file:

.. literalinclude:: config_3.ini

<<name='default_placement', wrap=False>>=
config = SafeConfigParser()
config.read(FILE_3)
@
<<name='print_default_placement', echo=False, results='sphinx'>>=
print_config(config)
@

So, it looks like you can place the DEFAULT section after the section that references it without any problems. Oddly, though, the 'c' option showed up in the `NotDefault` section. It kind of looks like the DEFAULT is read first, then its values are added to each of the sections.

The config file:

.. literalinclude:: config_4.ini

<<name='default_test', wrap=False>>=
config = SafeConfigParser()
config.read(FILE_4)
@
<<name='print_default', echo=False, results='sphinx'>>=
print_config(config)
@

It does look like everything put in the DEFAULT section is added to the other sections, but the values it adds are replaced if the section defines the same options.

.. _exploring-configparser-whole-shebang:
The Whole Shebang
-----------------

The reason I looked into this was so that I could put a file-glob in a main configuration file and refer to other files so that I can isolate the parts that change or are complicated from the parts that don't... or aren't... I don't yet know if that's a good idea -- nothing to do but to try.

The base-configuration in this directory:

.. literalinclude:: sample_a.ini

The two sub-configurations in the `samples` sub-folder:

.. literalinclude:: samples/sample_b.ini

.. literalinclude:: samples/sample_c.ini


A module to get the filenames:

.. currentmodule:: glob
.. autosummary::
   :toctree: api

   iglob
   
<<name='whole_shebang', wrap=False>>=
config = SafeConfigParser()
names = []
names.extend(config.read(SAMPLE_BASE))
for name in glob.iglob(config.get('DEFAULT', 'glob')):
    names.extend(config.read(name))
@
<<name='print_shebang', echo=False, results='sphinx'>>=
print_config(config)
@

So what we got was:

    * Section_A is a composite of DEFAULT, and the two Section_A sections from the sub-files

    * Section_B and Section_C used the DEFAULT `hortence` to complete themselves

    * None of the Sections were in the original file, they were composed from the sub-files found by the glob

I didn't notice it before, but the ConfigParser is returning the name of the file it reads. I don't know how useful this is since you pass in the filename, but I guess there was a reason for it.

<<name='print_filenames', wrap=False>>=
print "\nFilenames Read:"
for name in names:
    print "   {0}".format(name)
@

