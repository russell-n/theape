Exploring Paramiko
==================

.. figure:: figures/thorazine.jpg
   :align: center

   Thorazine Advertisement (`source: wikipedia <http://simple.wikipedia.org/wiki/File:Thorazine_advert.jpg>`_)

This is an exploration of `paramiko, <http://www.lag.net/paramiko/>`_ a python implementation of an `SSH client <http://en.wikipedia.org/wiki/Secure_Shell>`_. I will focus primarily on the `SSHClient <http://www.lag.net/paramiko/docs/paramiko.SSHClient-class.html>`_ class that it provides, as this is what I work with the most.

Contents:

    * :ref:`Paramiko's What <paramiko-readme-what>`
    * :ref:`Paramiko's API <paramiko-api>`
    * :ref:`Paramiko Module Diagram <paramiko-module-diagram>`
    * :ref:`Paramiko SSHClient Class Diagram <paramiko-sshclient-class-diagram>`
    * :ref:`A Localhost Experiment <paramiko-localhost-experiment>`
    * :ref:`Paramiko's SSHClient.connect Method <paramiko-sshclient-connect>`
    * :ref:`Paramiko's SSHClient.exec_command Method <paramiko-sshclient-exec_command>`

.. _paramiko-readme-what:

Paramiko What?
--------------

This is taken from the README file:

What
~~~~

    "paramiko" is a combination of the esperanto words for "paranoid" and "friend".  it's a module for python 2.5+ that implements the SSH2 protocol for secure (encrypted and authenticated) connections to remote machines. Unlike SSL (aka TLS), SSH2 protocol does not require hierarchical certificates signed by a powerful central authority. you may know SSH2 as the protocol that replaced telnet and rsh for secure access to remote shells, but the protocol also includes the ability to open arbitrary channels to remote services across the encrypted tunnel (this is how sftp works, for example).

.. '

.. note:: According to `Google Translate <http://translate.google.com/translate_t?safe=off&bav=on.2,or.r_cp.r_qf.&bvm=bv.55819444,d.cGE&biw=1152&bih=651&um=1&ie=UTF-8&hl=en&sl=en&tl=eo&text=paranoid+friend&client=ob>`_ 'paranoid friend' translates to 'paranoja amiko' in esperanto.

<<name='imports', echo=False>>=
# third-party
import paramiko
from paramiko import SSHClient

# this package
from ape.commoncode.code_graphs import module_diagram, class_diagram
@

.. _paramiko-api:

The API
-------

.. currentmodule:: paramiko
.. autosummary::
   :toctree: api

   SSHClient

.. _paramiko-module-diagram:
   
The Module Diagram
------------------

Let's see what the module looks like.

.. superfluous '

<<name='client_file', echo=False>>=
# paramiko is using __init__.py to elevate the SSHClient to the top level
# you need to add the module name yourself or the module diagram will try __init__.py
# and be empty
client_file =  paramiko.__file__.replace("__init__.py", "client.py")
@
<<name='paramiko_module', echo=False, results='sphinx'>>=
name = module_diagram(module=client_file,
                      project='paramiko')
print ".. image:: {0}".format(name)
print "   :align: center"
@

Well, there's a lot there. If nothing else, this might indicate how complicated the SSHClient is.

.. superfluous '
.. _paramiko-sshclient-class-diagram:
   
Class Diagram
-------------

Okay, having looked at the module-dependencies for paramiko.client, let's look at the SSHClient class itself.

.. superfluous '

<<name='sshclient_class_diagram', echo=False, wrap=False, results='sphinx'>>=
name = class_diagram(class_name='SSHClient', module=client_file)
print ".. figure:: {0}".format(name)
print "   :align: center"
@

.. _paramiko-localhost-experiment:

A Localhost Experiment
----------------------

Okay, so now that I see the diagrams and the API, how would I use this to connect to a host? As it turns out I have a user called `fakeuser` on this computer set-up, along with a running open-ssh-server, so let's try a `connect` call.

.. superfluous '

The connect API
~~~~~~~~~~~~~~~

.. currentmodule:: paramiko.client
.. autosummary::
   :toctree: api
   
   SSHClient.connect

The Connect Call
~~~~~~~~~~~~~~~~

<<name='client_connect', wrap=False>>=
client = SSHClient()
try:
    client.connect('localhost', username='fakeuser')
except paramiko.SSHException as error:
    print error    
@

Well, that didn't work. If you look in the docstring for the SSHClient you will see that they recommend making a call to ``client.load_system_host_keys``::

    client = SSHClient
    client.load_system_host_keys()

.. superfluous '

Load System Host Keys API
~~~~~~~~~~~~~~~~~~~~~~~~~

.. autosummary::
   :toctree: api

   SSHClient.load_system_host_keys

    
So, let's try that again.

.. superfluous '

<<name='client_connect_2', wrap=False>>=
client.load_system_host_keys()
try:
    client.connect('localhost', username='fakeuser')
except paramiko.SSHException as error:
    print error
@

Looking at my earlier code (from the original `ApeTools`), I'm setting the missing-host-key-policy with a method call:

.. superfluous '

<<name='client_connect_3', wrap=False>>=
# this was in the ape
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
client.load_system_host_keys()

try:
    client.connect('localhost', username='fakeuser')
    stdin, stdout, stderr = client.exec_command('ls')
    for line in stdout:
        print "StdOut: {0}".format(line)

except (IOError, paramiko.SSHException) as error:
    print error
@

Which seems to have fixed it (the output has the files my `fakeuser` has in  the home directory (I used `adduser` to add the `fakeuser` so there's none of the default folders like `Desktop` or `Documents`)).

.. '

The key seems to have been setting the `MissingHostKeyPolicy` to use the `AutoAddPolicy` which seems to mean that it searches a series of default locations to see if the `hostname` is one of the known-hosts. Alternatively, according to the API, you should be able to set a file-name directly.

The Related API
~~~~~~~~~~~~~~~

.. currentmodule:: paramiko.client
.. autosummary::
   :toctree: api
   
   MissingHostKeyPolicy
   AutoAddPolicy

.. currentmodule:: paramiko.hostkeys
.. autosummary::
   :toctree: api
      
   HostKeys

.. currentmodule:: paramiko.agent
.. autosummary::
   :toctree: api
   
   AgentSSH

.. _paramiko-sshclient-connect:   

The SSHClient.connect
---------------------

.. currentmodule:: paramiko.client
.. autosummary::
   :toctree: api

   SSHClient.connect

Now that I know how to get it to work, maybe I can look at what actually happened. This is the the signature for the ``SSHClient.connect`` method::

   SSHClient.connect(hostname, port=22, username=None, password=None, pkey=None, key_filename=None, timeout=None, allow_agent=True, look_for_keys=True, compress=False, sock=None)

And the start of the docstring:

    Connect to an SSH server and authenticate to it. The server's host key is checked against the system host keys (see ``load_system_host_keys``) and any local host keys (``load_host_keys``). If the server's hostname is not found in either set of host keys, the missing host key policy is used (see ``set_missing_host_key_policy``). The default policy is to reject the key and raise an ``SSHException``.

    Authentication is attempted in the following order of priority:

        #. The ``pkey`` or ``key_filename`` passed in (if any)
        #. Any key we can find through an SSH agent
        #. Any ``id_rsa`` or ``id_dsa`` key discoverable in ~/.ssh/
        #. Plain username/password auth, if a password was given

    If a private key requires a password to unlock it, and a password is passed in, that password will be used to attempt to unlock the key.

So looking at that and the `MissingHostKeyPolicy` and `AutoAddPolicy` links above, it looks like the system did not have `localhost` in the list of known hosts and by setting `AutoAddPolicy` I told it to add any unknown hosts I give it to the list of known hosts, fixing it. It seems like there would be no point to having a known hosts file and requiring confirmation for new hosts if you are going to add them automatically, so this is probably some kind of securrity risk. But given that my main use for this will be to talk to my machines on the LAN, this seems to be okay. Luckily I'm not a security expert so I don't know how bad this really might be (ignorance is bliss, though not as much fun as mushrooms, unfortunately).

.. _paramiko-sshclient-exec_command:

The SSHClient exec_command
--------------------------

Now that I've managed to get a connection going it's time to turn my attenttion to actually doing things on the machine. Paramiko has two ways to work with the shell -- interactively using ``invoke_shell`` and non-interactively using ``exec_command``. Since my intention is to use this within code I will focus on the ``exec_command`` method.

.. currentmodule:: paramiko.client
.. autosummary::
   :toctree: api
   
   SSHClient.exec_command
   SSHClient.invoke_shell

There's a few things of interest to note. One is that they've added a timeout so there's no need to sub-class it and add your own to get a timeout (assuming that what it's there for). The second thing to note is that it raises a `paramiko.SSHException` if the server fails to execute the command. Does this mean all errors? What if it's a connectivity problem, does it raise this instead of a `socket.error`? The third (and probably most immediately useful) thing to note is that what you get back is a tuple of (`stdin`, `stdout`, `stderr`). It's important to note the ordering of the returned tuples, as mixing them up will produce unpredictable results (I had standard out and standard in switched in one of the earlier examples and got an `IOError` when I tried to read from standard in -- the error said that the file was closed, which might make sense if you know that I was trying to read from standard in, but it took me a little while to figure it out).

nmap
----

I want to see if paramiko will allow me to run commands as sudo. Since `nmap` will change its behavior (adding MAC addresses) if you run the ping-scan using `sudo` I can run it with and without root privileges and see if I get the expected output.

<<name='nmap_sp', wrap=False>>=
client = SSHClient()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
client.connect('localhost', username='fakeuser')
stdin, stdout, stderr = client.exec_command("nmap -sP '192.168.0.*'")
for line in stdout:
    print line
@

And now with sudo.

<<name='nmap_sudo', wrap=False>>=
stdin, stdout, stderr = client.exec_command('sudo nmap -sP "192.168.0.*"', get_pty=True)
stdin.write('fakepassword\n')
for line in stdout:
    print line    
@

Two thing to note -- one is that I didn't need to call the load_system_host_keys. It seems that the AutoAddPolicy takes care of that. The other thing to note is that I needed to set `get_pty` to True. If I didn't it would close the channel with this error (on my machine)::

    sudo: no tty present and no askpass program specified
