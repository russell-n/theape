Reproducing the APE's Interface
===============================

.. '

.. _documentation-developer-exploring-docopt-reproducing-ape:

Introduction
------------

Since one of the reason's for exploring `docopt` is to find a way to simplify the argument parsing in the Ape, I'll see if I can reproduce it here.

Contents:

    * :ref:`The Ape's Usage String <docopt-reproducingape-ape-usage-string>`
    * :ref:`The Base Usage String <docopt-reproducingape-base-usage-string>`
    * :ref:`Run Sub-Command <docopt-reproducingape-run-sub-command>`
    * :ref:`Fetch Sub-Command <docopt-reproducingape-fetch-sub-command>`
    * :ref:`List Sub-Command <docopt-reproducingape-list-sub-command>`
    * :ref:`Check Sub-Command <docopt-reproducingape-check-sub-command>`
    * :ref:`Help Sub-Command <docopt-reproducingape-help-sub-command>`

.. '

<<name='imports', echo=False>>=
# python standard library
import subprocess

# third party
import docopt

# the ape
from ape.main import main

# this documentation
from sections.commons import catch_exit
from sections.commons import usage
@

.. _docopt-reproducingape-ape-usage-string:

The Ape's Usage String
----------------------

.. '

.. currentmodule:: ape
.. autosummary::
   :toctree: api

   ape.main

<<name='ape_arguments', wrap=False>>=
print subprocess.check_output('ape -h'.split())

@
.. _docopt-reproducingape-base-usage-string:

.. include:: sections/baseusagestring.rst

.. _docopt-reproducingape-run-sub-command:
    
.. include:: sections/runsubcommand.rst
    
.. _docopt-reproducingape-fetch-sub-command:

.. include:: sections/fetchsubcommand.rst

.. _docopt-reproducingape-list-sub-command:

.. include:: sections/listsubcommand.rst

.. _docopt-reproducingape-check-sub-command:

.. include:: sections/checksubcommand.rst

.. _docopt-reproducingape-help-sub-command:

.. include:: sections/helpsubcommand.rst