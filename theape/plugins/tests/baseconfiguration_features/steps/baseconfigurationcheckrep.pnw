BaseConfiguration check_rep
===========================

.. literalinclude:: ../baseconfigurationcheckrep.feature
   :language: gherkin

<<name='imports', echo=False>>=
#third-party
from behave import given, when, then
from hamcrest import assert_that, is_, calling, raises, equal_to
from configobj import ConfigObj

# this package
from theape.plugins.base_plugin import BaseConfiguration, ConfigurationError
@

<<name='concrete_configuration', wrap=False>>=
configspec_source = """
plugin = option('Concrete')

op1 = integer
op2 = integer
"""

class ConcreteConfiguration(BaseConfiguration):
    """
    Test configuration
    """
    
    @property
    def configspec_source(self):
        if self._configspec_source is None:
            self._configspec_source = configspec_source
        return self._configspec_source

    @property
    def product(self):
        return
@

Scenario: User calls check_rep on valid configuration
-----------------------------------------------------

<<name='valid_configuration', wrap=False>>=
valid_configuration = """
[cement]
plugin = Concrete
op1 = 53
op2 = 64
""".splitlines()

@given("BaseConfiguration implementation with valid configuration")
def step_implementation(context):
    context.configuration = ConcreteConfiguration(source=ConfigObj(valid_configuration),
                                                  section_name='cement')
    return
@

<<name='check_rep_call', wrap=False>>=
@when("check_rep is called")
def step_implementation(context):
    context.outcome = context.configuration.check_rep()
    return
@

<<name='nothing_happens', wrap=False>>=
@then("nothing happens")
def step_implementation(context):
    assert_that(context.outcome,
                is_(None))
    return
@

Scenario: User calls check_rep on bad configuration
---------------------------------------------------

<<name='configuration_errors', wrap=False>>=
invalid_configuration = """
[konkrete]
plugin = Concrete
op1 = apple
op2 = banana
""".splitlines()

@given("BaseConfiguration implementation with configuration errors")
def step_implementation(context):
    context.configuration = ConcreteConfiguration(source=ConfigObj(invalid_configuration),
                                                  section_name='konkrete')
        
    return
@

<<name='check_rep_check', wrap=False>>=
@when("check_rep is checked")
def check_rep_check(context):
    context.callable = context.configuration.check_rep
    return
@

<<name='assert_error', wrap=False>>=
@then("a ConfigurationError is raised")
def step_implementation(context):
    assert_that(calling(context.callable),
                raises(ConfigurationError))
    return
@

Scenario: User calls check_rep on configuration with extra values
-----------------------------------------------------------------

<<name='unknown_values', wrap=False>>=
extra_option_configuration = """
[cement]
plugin = Concrete
op1 = 53
op2 = 64
ummagumma = apple_banana
""".splitlines()

@given("BaseConfiguration implementation with unknown values")
def step_implementation(context):
    context.configuration = ConcreteConfiguration(source=ConfigObj(extra_option_configuration),
                                                  section_name='cement')
    return
@
  When check_rep is checked
  Then a ConfigurationError is raised

Scenario: User calls check_rep on configuration with allowed extra values
-------------------------------------------------------------------------

<<name='allowed_unknowns', wrap=False>>=
@given("BaseConfiguration implementation with allowed unknown values")
def allowed_unknowns(context):
    context.configuration = ConcreteConfiguration(source=ConfigObj(extra_option_configuration),
                                                  section_name='cement',
                                                  allow_extras=True)
    return
@

When check_rep is checked

<<name='no_error', wrap=False>>=
@then("a ConfigurationError not raised")
def no_error(context):
    context.callable()
    return
@

<<name='assert_extras', wrap=False>>=
@then("the extra values are in the configuration")
def assert_extras(context):
    assert_that(context.configuration.configuration['ummagumma'],
                is_(equal_to('apple_banana')))
