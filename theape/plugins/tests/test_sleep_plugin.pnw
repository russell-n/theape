Testing the Sleep Plugin
========================

The `Sleep` plugin inherits from the :ref:`BasePlugin <base-plugin>` and so takes two parameters on instantiation:

   * configuration (a configuration map to get config-file values from)

   * section_header (the section name that has values for the plugin)

The section parameter `section_header` was added so that more than one configuration of each plugin can be used. Since the operator is passing this in to all  the plugins it can be assumed that it will always exist (in the current implementation of the ape).

.. module:: theape.plugins.tests.test_sleep_plugin
.. autosummary::
   :toctree: api

   TestingSleepPlugin.test_constructor
   TestingSleepPlugin.test_product

<<name='imports', echo=False>>=
# python standard library
import unittest

# third-party
from mock import MagicMock, call

# the ape
from theape.plugins.sleep_plugin import Sleep, END_OPTION, TOTAL_OPTION, INTERVAL_OPTION, VERBOSE_OPTION
@
   
<<name='TestingSleepPlugin', echo=False>>=
class TestingSleepPlugin(unittest.TestCase):
    def setUp(self):
        self.config_map = MagicMock()
        self.section_header = 'sleeper'
        self.sleep = Sleep(configuration=self.config_map,
                           section_header=self.section_header)
        return

    def test_constructor(self):
        """
        Does it take the two expected parameters?
        """
        self.assertIs(self.config_map, self.sleep.configuration)
        self.assertIs(self.section_header, self.sleep.section_header)
        return

    def test_product(self):
        """
        Does it build the product in the way you expect?
        """
        product = self.sleep.product
        self.config_map.get_datetime.assert_called_with(section=self.section_header,
                                                        option=END_OPTION,
                                                        optional=True)
        calls = [call(section=self.section_header,option=TOTAL_OPTION,optional=True),
                 call(section=self.section_header,option=INTERVAL_OPTION,optional=True,default=1)]
        self.assertEqual(calls, self.config_map.get_relativetime.call_args_list)
        self.config_map.get_boolean.assert_called_with(section=self.section_header,
                                            option=VERBOSE_OPTION,
                                            optional=True,
                                            default=True)
        return    
@







