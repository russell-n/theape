The APE (Read Me)
=================
<<name='imports', echo=False>>=
# python standard library
from __future__ import print_function
import subprocess
@

The `All-Purpose Experimenter` is a plugin-based system meant to create a unified front-end for different device-related testing. The documentation is on `pythonhosted <http://pythonhosted.org//theape/>`_.

Installation
------------

If you have the repository you can install it by using the ``setup.py`` file.

.. code:: bash

   python setup.py install

Alternately you can pull it from PyPi.

.. code:: bash

   pip install theape

If you are installing it system-wide you will probably have to prefix this and other install commands with ``sudo``.


Command Line Help
-------------

The APE has some command-line help.

.. code:: bash

   theape -h

<<name='help_output',  echo=False, wrap=False>>=
print(subprocess.check_output('theape -h'.split()))
@

I don't have much user documentation set up yet, so I'll just dump the sub-commands' help.

.. '

Run Sub-Command
~~~~~~~~~~~~~~~

<<name='run', echo=False, wrap=False>>=
print(subprocess.check_output('theape run -h'.split()))
@

The ``run`` sub-command grabs the configuration files and runs the plugins listed.

Fetch Sub-Command
~~~~~~~~~~~~~~~~~

<<name='fetch', echo=False, wrap=False>>=
print(subprocess.check_output('theape fetch -h'.split()))
@

The ``fetch`` sub-command dumps the `theape` sample configuration to standard-out. If you pass in one or more plugin names it will output their sample configurations instead. The intent is for the output to be re-directed to a file for editing or to dump it to the screen if you just want to see the options. You can combine the Ape's configuration with other plugins' configurations by using `Ape` explicitly::

    theape fetch Ape Sleep Dummy

Right nom there aren't any interesting ones built into the Ape, as I'm focusing on building plugin-adapters for some code that I don't own, but external plugin-adapters can be referenced using the ``-m`` or ``--module`` option. Note that it's a module name, not a package name that has to be passed in. If, for example, there is an Ape-plugin named ``Ping`` in a ``plugins`` file within a package named ``apeplugins``, you should be able to get its sample configuration like this::

    theape fetch --module apeplugins.plugins Ping

The Help Sub-Command
~~~~~~~~~~~~~~~~~~~~

<<name='help', echo=False, wrap=False>>=
print(subprocess.check_output('theape help -h'.split()))
@

    The ``help`` sub-command displays the help strings provided by the plugins. They are meant to be man-page-like so they are formatted and output to less. As with ``fetch`` you need to specify any non-ape modules.

The List Sub-Command
~~~~~~~~~~~~~~~~~~~~

<<name='list', echo=False, wrap=False>>=
print(subprocess.check_output('theape list -h'.split()))
@

The ``list`` subcommand prints out any Ape Plugins that are found. Like the ``help`` and ``fetch`` sub-commands the ``list`` needs to be told about any external plugins. Unlike them it takes them as positional arguments (not using the ``-m`` option). This was meant to reduce typing, although I might change this to be more consistent later.

The Check Sub-Command
~~~~~~~~~~~~~~~~~~~~~

<<name='check', echo=False, wrap=False>>=
print(subprocess.check_output('theape check -h'.split()))
@

This sub-command builds the configuration and calls the ``check_rep`` method of each of the plugins. It is meant to validate your configuration without running the test.

Building the Written Documentation
----------------------------------

The APE was written in a literate-programming style with Pweave. The ``theape`` folder serves as both the python package code and as a `sphinx` source repository. If you want to compile the documentation you will at a minimum need `Sphinx <http://sphinx-doc.org/>`_, `alabaster <https://pypi.python.org/pypi/alabaster>`_ , and `sphinxcontrib-plantuml <https://pypi.python.org/pypi/sphinxcontrib-plantuml>`_. To get the ``sphinxcontrib-plantuml`` also requires `plantuml <http://plantuml.com/>`_. Everything except `plantuml` is on pypi so you can get them with pip::

   pip install sphinx
   pip install sphinxcontrib-plantuml
   pip install alabaster

If you are using ubuntu you can use ``apt-get`` to get `plantuml`::

   apt-get install plantuml

Once everything is installed you can build the documentation using the Makefile. To build the html, for example::

   make html

This should create a folder named ``doc`` with an ``html`` sub-folder containing the documentation.

.. note:: If this is installed in a `virtualenv` then both the `sphinx` installation and the `theape` installation have to be in the same `virtualenv` or the auto-summaries for the code won't be built.

Installing Testing Dependencies
-------------------------------

The APE is currently being tested using `behave <http://pythonhosted.org/behave/>`_ so if you want to run the tests, you'll need that, `pyhamcrest <http://pyhamcrest.readthedocs.org/en/1.8.0/>`_ and `mock <http://mock.readthedocs.org/en/latest/magicmock.html>`_. All three are on pypi so if you have pip installed you can install them from the web (if installing system wide run as root).

.. code:: bash

   pip install behave
   pip install pyhamcrest
   pip install mock

